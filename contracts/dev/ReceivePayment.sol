// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.20;

import "@openzeppelin/contracts/access/Ownable.sol";

/**
 * @title ReceivePayment
 * @dev This contract isto collect social recovery fees from users.
 * Users pay ETH to this contract, and we will performs the social recovery operation for them.
 * so that user only need to collect guardian signatures, after that, our backend will perform the recovery operation.
 */
contract ReceivePayment is Ownable {
    event PaymentReceived(bytes32 indexed paymentId, address indexed sender, uint256 amount);

    constructor(address _owner) Ownable(_owner) {}

    /**
     * @notice Makes a payment to the contract
     * @dev This function is payable, meaning it can receive Ether. It emits a PaymentReceived event.
     * @param _paymentId The ID of the payment, generated by the backend
     */
    function pay(bytes32 _paymentId) external payable {
        emit PaymentReceived(_paymentId, msg.sender, msg.value);
    }

    /**
     * @notice Withdraws the contract balance to a specified address
     * @dev This function can only be called by the owner of the contract. It emits a Withdraw event.
     * @param _to The address to which the funds will be withdrawn
     */
    function withdraw(address _to) external onlyOwner {
        (bool success,) = payable(_to).call{value: address(this).balance}("");
        require(success, "Withdraw failed");
    }
}
